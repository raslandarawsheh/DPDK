#!/usr/bin/python
try:
    import os
    import getopt
    import sys
    import socket
    import time
    import subprocess
    import signal
    import datetime
    import random
    import thread
    import threading
    import pexpect
    import re 
    import thread
    from socket import *
    import fcntl
    import struct

except Exception, e:
    print ("-E- can not import file %s" %e)
    sys.exit(1)

ip_hw = None
master_rc = False
generator_device = None
generator_port = None
testpmd_master_rc = '/x86_64-native-linuxapp-gcc/build/app/test-pmd/testpmd'
class Bcolors:
    """
    Class : Bcolors
    Description : Set terminal color to help the user
    """

    HELP	= '\033[96m'
    HEADER	= '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL	= '\033[91m'
    ENDC	= '\033[0m'
    RESET	= '\033[37m'

def check_cores():
    cmd = "ls | grep 'core.*' | wc -l"
    rc, output = run_command(cmd)

    cmd = "ls | grep 'core.*'"
    rc, cores = run_command(cmd)

    number_of_cores = output.split('\n')[0]

    if(int(number_of_cores) != 0):
        cmd = "mv 'core.*' ../"
        rc, out = run_command(cmd)
        print "cores moved to ../"

    return number_of_cores, cores


def run_command (cmd):
    try:
        fd = os.popen(cmd)
        output = fd.read()
        rc = fd.close()
    except Exception, e:
                vl.EXCEPTION("run_command Failed (%s), cmd %s" % (str(e), str(cmd)))
                return (1, None)

    if (rc != None):
                rc = 1
    else:
                rc = 0

    return (rc, output)


def usage():
    """
    Function : usage
    Description : Usage is a function to print the help menu
    Return value : None
    """
    print Bcolors.HELP + "\thelp		\t| h	: Tool help and exit"
    print Bcolors.HELP + "\tserver		\t| s	: Is server (default No)" 
    print Bcolors.HELP + "\tmip		\t	: IP of mangemet interface"
    print Bcolors.HELP + "\tcip_port1		\t	: IP of the client interface port1"
    print Bcolors.HELP + "\tcip_port2           \t      : IP of the client interface port2"

def parse(tuple):
    """
    Function : parse
    Description : Parse is a method to parse the parameters, and produce the executed test command line
    Todo: Support unlimited option
    """

    global accepted_sock, connect_sock, ip_hw,  generator_device, generator_port, testpmd

    outputCommand = "/hpc/home/USERS/halsayyed/get_rxtx_throughput.sh mlx4_1 1"
    ip       	= None
    port        = 20202
    is_s        = False
    exit_status = 0
    mip = None
    cip_port1 = None
    cip_port2 = None
    invalidMac = False
    device = None
    
    try:
        opts, extraparams = getopt.getopt(tuple, "hsF:f:i:a:A:E:",['server', 'mip=', 'cip_port1=', 'cip_port2=', 'invalidMac' , 'ip=' , 'device='])
        if  (len(extraparams) != 0 or len(opts) == 0) :
            print("-E- Invalid extra argument:" )
            usage()
            sys.exit(1)
        for o,p in opts:
            if o in ['-h','--help']:
                usage()
                sys.exit(exit_status)

            elif o in ['-s', '--server']:
                is_s = True

            elif  o in ['--mip']:
                mip = p

            elif o in ['-i', '--ip']:
                ip = p
            elif o in ['--cip_port1']:
                cip_port1 = p

            elif o in ['--cip_port2']:
                cip_port2 = p

            elif o in ['--invalidMac']:
                invalidMac = True
            elif  o in ['--device']:
                device = p

            else:
                print o
                print("-E- Invalid argument:" )
                sys.exit(1)

    except Exception, e:
        print e.message
        usage()
        exit_status = 1
        sys.exit(exit_status)
        
    serverCommandLine = "/download/dpdk"
    serverCommandLine += testpmd_master_rc + " -n 4 "
    generator_device = 'mlx4_1'
    generator_port = '2'
    clientCommandLine = "raw_ethernet_bw --client --CPU-freq -i " + generator_port + " -d " + generator_device + " -l 8 "

    if is_s:
       # tcp_server(mip, int(port + 100))
        os.system("mst start")
        ip_hw = getHwAddr(getNameOfIp(ip))
        whitelisted = getWhiteListed(device)
        
        serverCommandLine += " -c 0xff "
        serverCommandLine += " -w " + str(whitelisted)
        serverCommandLine += " --  --burst=64 --txd=256 --rxd=256 --mbcache=512 --portmask 0x3 -i "
        serverCommandLine += " --nb-cores=4 "

    if is_s:
        print "Server Side ......................................................... mip %s port %s " %(mip, port)
        #Send MAC address to client
        try:
	    print "Dest MAC is  ", getHwAddr(getNameOfIp(ip))
            #accepted_sock.send(getHwAddr(getNameOfIp(ip)))
        except Exception, e:
            print "HwAddr Send Error ...."
            sys.exit(1)
    print "serverCommandLine:", serverCommandLine 

    return clientCommandLine,serverCommandLine,is_s,ip,outputCommand,mip,cip_port1,cip_port2,invalidMac
    output_list = output.split('\n')
    for index in range (len(output_list)):
        if "NIC statistics for port 0" in output_list[index]:
            port0 = True
            port1 = False

        if "NIC statistics for port 1" in output_list[index]:
            port1 = True
            port0 = False

        if "RX-packets:" in output_list[index] and port0:
            rx_port0 = output_list[index].split("RX-packets:")[1].split("RX-missed:")[0].strip()
            print "rx_port0 is :",rx_port0

        if "RX-packets:" in output_list[index] and port1:
            rx_port1 = output_list[index].split("RX-packets:")[1].split("RX-missed:")[0].strip()
            print "rx_port1 is :",rx_port1

        if "TX-packets:" in output_list[index] and port0:
            tx_port0 = output_list[index].split("TX-packets:")[1].split("TX-errors:")[0].strip()
            print "tx_port0 is :",tx_port0

        if "TX-packets:" in output_list[index] and port1:
            tx_port1 = output_list[index].split("TX-packets:")[1].split("TX-errors:")[0].strip()
            print "tx_port1 is :",tx_port1

    return rx_port0, rx_port1, tx_port0, tx_port1
            
def runTest():
    """
    Function : runTest
    Description : The main function that will run testpmd tests
    Return value : None
    """
    clientCommandLine,serverCommandLine,is_s,ip,outputCommand,mip,cip_port1,cip_port2,invalidMac = parse(sys.argv[1:])
    os.system("echo 1024 >  /proc/sys/vm/nr_hugepages")
    ip_first_octet = ip.split('.')[0]
    cip_port1_first_octet = cip_port1.split('.')[0]
    if is_s == True:
            
        process2  = subprocess.Popen(outputCommand + " > server.out.tmp &", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
       
        time.sleep(1)
        process3 = os.popen("ibdev2netdev | grep Up").read()    #get the names of all ports on the machine
        portNamesOutput = process3.split("\n")
        portNames = [None] * (len(portNamesOutput)-1)

        for w in range (len(portNamesOutput)-1):
             portNames[w] =  portNamesOutput[w].split('==> ')[1].split(' ')[0]

        child = pexpect.spawn(serverCommandLine)
        child.expect('')
        child.sendline("show port info 0")      #get mac address of port 0 using show port info
        child.expect('qinq')
        portInfoOutput = child.before
        portInfoToPrint = portInfoOutput.split("\n")
        for w in range (len(portInfoToPrint)):
            if "MAC address: " in portInfoToPrint[w]:
                MacAddressPortZero = portInfoToPrint[w].split('MAC address: ')[1]

        child.sendline("show port info 1")      #get mac address of port 1 using show port info
        child.expect('qinq')
        portInfoOutput1 = child.before
        portInfoToPrint1 = portInfoOutput1.split("\n")
        for w in range (len(portInfoToPrint1)):
            if "MAC address: " in portInfoToPrint1[w]:
                MacAddressPortOne = portInfoToPrint1[w].split('MAC address: ')[1]
	
	portZeroName = None
	portOneName = None
        for w in range (len(portNames)):                                                        #check which port name has the mac address of port 0
            if MacAddressPortZero.strip().lower() == getHwAddr(portNames[w]).strip().lower():
                portZeroName = portNames[w]

        for w in range (len(portNames)):                                                        #check which port name has the mac address of port 1
            if MacAddressPortOne.strip().lower() == getHwAddr(portNames[w]).strip().lower():
                portOneName = portNames[w]

       
        child.sendline("start")
        child.sendline("yes")
        child.expect("Command not found")
        time.sleep(8)
        child.sendline("show port stats all")
        child.sendline("stop")
        child.expect(".*Done")
        outputToPrint = child.match.group(0)
        print "Server Output is :", outputToPrint
        outputLineToPrint = outputToPrint.split("\n")
        RxPackets = False
        TxPackets = False
        passCount = 0
        rxDataCounter = 0
        txDataCounter = 0
        countFlage = True
        flagToEnter = False
        alltraffic = False
	Bad_csum = False
        Bad_ipcsum = None
        Bad_l4csum = None
        checksum_right_port = False
        for w in range (len(outputLineToPrint)):
            if "RX-packets" in outputLineToPrint[w] and alltraffic:
                all_rx_packets = outputLineToPrint[w].split('RX-total: ')[1]#[1].split('RX-dropped:')[0]
                print "RX-total: ",int(all_rx_packets)
            if "TX-packets" in outputLineToPrint[w] and alltraffic:
                all_tx_packets = outputLineToPrint[w].split('TX-total: ')[1]#[1].split('TX-dropped:')[0]
                print "TX-total: ",int(all_tx_packets)

            if "Forward statistics for port" in outputLineToPrint[w]:
                countFlage = False 
            if "######################## NIC statistics for port 1  ########################" in outputLineToPrint[w]:

                RxPackets = True
            if "RX-packets:" in outputLineToPrint[w] and RxPackets:
                RxPacketsRate = outputLineToPrint[w].split("RX-packets:")[1].split("RX-missed:")[0].strip()

                RxPackets = False 
            elif "RX-packets:" in outputLineToPrint[w] and TxPackets == False and countFlage and flagToEnter:
                rxDataCounter += int(outputLineToPrint[w].split("RX-packets:")[1].split("TX-packets:")[0].strip())
                txDataCounter += int(outputLineToPrint[w].split("RX-packets:")[1].split("TX-packets:")[1].split("TX-dropped:")[0].strip())

            if "######################## NIC statistics for port 0  ########################" in outputLineToPrint[w]:
                TxPackets = True
            if "TX-packets:" in outputLineToPrint[w] and TxPackets:
                TxPacketsRate = outputLineToPrint[w].split("TX-packets:")[1].split("TX-errors:")[0].strip()
                TxPackets = False
            if "Forward Stats for RX Port" in  outputLineToPrint[w] and rssQueuesFlage :
                flagToEnter = True 
                passCount += 1
                zeroQueueValue = outputLineToPrint[w].split("0/Queue=")[1].split("->")[0].strip()
                oneQueueValue = outputLineToPrint[w].split("1/Queue=")[1].strip("-------")[1].strip()
            if "Accumulated forward statistics for all ports" in outputLineToPrint[w]:
                alltraffic = True


	    if "Bad-ipcsum:" in outputLineToPrint[w] and checksum_right_port:
		Bad_ipcsum = outputLineToPrint[w].split("Bad-ipcsum:")[1].split("Bad-l4csum:")[0].strip().strip()
		print "Bad_ipcsum" , Bad_ipcsum
            if "Bad-l4csum:" in outputLineToPrint[w] and checksum_right_port:
                Bad_l4csum = outputLineToPrint[w].split("Bad-l4csum:")[1].strip().strip()
                checksum_right_port = False

        child.sendline("quit")
        #child.close(False)
        print "testpmd Got %s Mpps" %(str(int(all_tx_packets)/10/1024/1024))
        checkOutputFile(RxPacketsRate,TxPacketsRate,passCount,rxDataCounter,txDataCounter,all_tx_packets,all_rx_packets)


def getHwAddr(ifName):
    s = socket(AF_INET, SOCK_DGRAM)
    info = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', ifName[:15]))
    return ''.join(['%02x:' % ord(char) for char in info[18:24]])[:-1]

def getNameOfIp (ip):
    cmd = "netstat -ie | grep -B1 " + ip + " | head -n1 | awk '{print $1}'"
    nameOfIp =  os.popen(cmd).read().strip()
    try:
        nameOfIp = nameOfIp.split(':')[0] # RH7 returns interface name concatenated with ':'
    except Exception, e:
        nameOfIp = nameOfIp

    return nameOfIp

def getWhiteListed(device):
    cmd = "mst status | grep -A1 " + device + " | grep -v " + device + " "
    dev = os.popen(cmd).read().split('=')[1].split(' ')[0]
    return dev

def checkOutputFile(RxPacketsRate,TxPacketsRate,passCount,rxDataCounter,txDataCounter,all_tx_packets,all_rx_packets):
    TxOutput = []
    RxOutput = []
    if int(all_rx_packets) == int(all_tx_packets) and int(all_rx_packets) != 0 and int(all_tx_packets) != 0 or  (int(all_rx_packets) != 0 and int(all_tx_packets) != 0 and abs(int(all_rx_packets) - int(all_tx_packets)) < 700):
        passPrint()
        sys.exit(0)
    else:
        print "RxPacketsRate is %s TxPacketsRate is %s" %(all_rx_packets, all_tx_packets)
        print "difference between RxPacketsRate & TxPacketsRate should be less than 700 while it is %s" %(int(all_rx_packets) - int(all_tx_packets))
        failPrint()
        sys.exit(1)

def passPrint():
    """
    Function : passPrint
    Description : Pass message print
    Return value : None
    """
    num, cores = check_cores()
    if(int(num) != 0):
        print "The tests passed but there is %s cores" %num
        print "The cores:"
        print cores
        failPrint()
        sys.exit(1)

    print Bcolors.OKGREEN + "\t\t\t---------------------Test Result---------------------"
    print Bcolors.OKGREEN + "\t\t\t                    [TEST PASSED]                    "
    print Bcolors.OKGREEN + "\t\t\t-----------------------------------------------------" + Bcolors.RESET

def failPrint():
    """
    Function : failPrint
    Description : fail message print
    Return value : None
    """
    num, cores = check_cores()
    if(int(num) != 0):
        print "The tests failed but there is %s cores" %num
        print "The cores:"
        print cores

    print Bcolors.FAIL + "\t\t\t---------------------Test Result---------------------"
    print Bcolors.FAIL + "\t\t\t                    [TEST FAILED]                    "
    print Bcolors.FAIL + "\t\t\t-----------------------------------------------------" + Bcolors.RESET

if __name__ == "__main__":
    """
    Function : main
    Description : The main function that will will start the run
    Return value : None
    """
    runTest()

#bashaaaaaaaaaaaaaaaarrr
